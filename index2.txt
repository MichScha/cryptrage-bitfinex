const fetch = require('node-fetch')
const url = 'https://api-pub.bitfinex.com/v2/'

// Ticker definitions
// https://api-pub.bitfinex.com/v2/tickers?symbols=ALL
let tickers = {
    tETHUSD: {
        pairing: ["ETH", "USD"],
        buyer: "",
        seller: "",
    },
    tEOSETH: {
        pairing: ["EOS", "ETH"],
        buyer: "",
        seller: ""
    },
    tEOSUSD: {
        pairing: ["EOS", "USD"],
        buyer: "",
        seller: ""
    },
}

let tickerPairs = []

let initial = {
    usd: { from: "USD", to: [] },
    eur: { from: "EUR", to: [] },
    btc: { from: "BTC", to: [] },
    eth: { from: "ETH", to: [] }
}

let circuits = [["ETH", "X", "BTC"]]

function test() {
    initial.eth.to.forEach(element => {
        if(initial.btc.to.includes(element)){
            console.log("ETH --> " + element + "-->BTC")
        }
    });
    initial.usd.to.forEach(element => {
        if(initial.btc.to.includes(element)){
            console.log("USD --> " + element + "-->BTC")
        }
        if(initial.eth.to.includes(element)){
            console.log("USD --> " + element + "-->ETH")
        }
    });
    initial.eur.to.forEach(element => {
        if(initial.btc.to.includes(element)){
            console.log("EUR --> " + element + "-->BTC")
        }
        if(initial.eth.to.includes(element)){
            console.log("EUR --> " + element + "-->ETH")
        }
    });
}

function calculate(pair){
    
}

getPairs()

function findStartingCircuits() {
    tickerPairs.forEach(pair => {
        if (pair.pairing[1] == 'USD') {
            if (!pair.pairing.includes('EUR')) {
                initial.usd.to.push(pair.pairing[0])
            }
        } else if (pair.pairing[1] == 'EUR') {
            if (!pair.pairing.includes('USD')) {
                initial.eur.to.push(pair.pairing[0])
            }
        } else if (pair.pairing[1] == 'BTC') {
            initial.btc.to.push(pair.pairing[0])
        } else if (pair.pairing[1] == 'ETH') {
            initial.eth.to.push(pair.pairing[0])
        }
    });
    //console.log(initial)
}
/*
USD/encodeURI
Step 1: array mit wÃ¤hrungen wo USD/EUR distinct
2* USD
3*EUR

FROM: USD TO: BTC List: 1,2,IOTA,4,5,6,7
FROM: USD TO: ETH List: 1,IOTA,2,3,4,5,6,7
FROM: EUR TO: EUR List: 1,2,3,4,5,6,7
FROM: EUR TO: USD List: 1,,3,4,5,6,7

FROM: USD TO: BTC List: .....
FROM: EUR TO: ETH

USD --> BTC --> IOTA --> ETH --> ? --> ? --> USD
EUR --> BTC --> EUR



10 USD ->0,0001 BTC -> 29 IOTA -> 5 ETH ->10,5USD

[ 'USD', 'BTC': ['ETH','B','C'] ]
[ 'USD', 'ETH': ['A','B','C'] ]
*/
function nextCircuitElement(token) {
    console.log(token)
    if (token[1] == 'BTC') {
        let test = []
        tickerPairs.forEach(function (element) {
            //console.log(element.pairing);
            if (element.pairing.includes(token)) {
                test.push(element)
            }
            //var test = element.pairing.filter(pair => token);
            //console.log(test)
        })
        //console.log(tickerPairs)
        //console.log(test);

    }
    /*
    tickerPairs.forEach(pair => {
        if (pair.pairing[0] == token) {
            if (pair.pairing[1] != 'USD' || pair.pairing[1] != 'EUR') {
                nextCircuitElement(pair.pairing[1])
                console.log(token + ' -> ' + pair.pairing[1])
            }
        } else if (pair.pairing[1] == token) {
            if (pair.pairing[1] != 'USD' || pair.pairing[1] != 'EUR') {
                nextCircuitElement(pair.pairing[0])
                console.log(token + ' -> ' + pair.pairing[0])
            }
        }
    });*/
}

async function getPairs() {
    //https://api-pub.bitfinex.com/v2/tickers?symbols=ALL
    try {
        let pathParams = 'tickers'
        let queryParams = 'symbols=ALL'
        let req = await fetch(`${url}/${pathParams}?${queryParams}`)
        let response = await req.json()
        // console.log(`STATUS ${req.status} - ${JSON.stringify(response)}`)
        response.forEach(element => {

            if (element[0].length == 7) {
                //console.log(element[0])
                let firstT = element[0].substring(1, 4)
                let secondT = element[0].substring(4, 7)
                let pair = {
                    //   [element[0]]: {
                    pairing: [firstT, secondT],
                    buyer: "",
                    seller: "",
                    //  }
                }
                //pair.pairing.push(element[0].substring(1, 4))
                //console.log(pair)
                tickerPairs.push(pair)
            }
        });
        findStartingCircuits()
        test()
    }
    catch (err) {
        console.log(err)
    }
}

// Request current orderbooks
Object.keys(tickers).forEach(element => {
    request(element)
    //console.log(element)
});

function calculateCircuits() {

}

async function request(element) {
    let precision = 'P0'
    let queryParams = ''
    try {
        let pathParams = 'book/' + element + "/" + precision
        let req = await fetch(`${url}/${pathParams}?${queryParams}`)
        let response = await req.json()
        // console.log(`STATUS ${req.status} - ${JSON.stringify(response)}`)
        console.log("Orderbook for: " + element)
        //console.log(response)
        //console.log(response.length)
        tickers[element].buyer = response.slice(0, 25);
        //console.log(tickers[element].buyer)
        tickers[element].seller = response.slice(26, 49);
    }
    catch (err) {
        console.log(err)
    }
}
